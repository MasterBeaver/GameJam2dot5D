//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Character/Movement/Mouse.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MouseInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MouseInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Mouse"",
    ""maps"": [
        {
            ""name"": ""Mosue"",
            ""id"": ""e6eeae0b-326a-4cb6-bfd7-8347452172d0"",
            ""actions"": [
                {
                    ""name"": ""MosueClick"",
                    ""type"": ""Button"",
                    ""id"": ""dcb2184c-1915-451f-bc9c-2c6411cdfa3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MosuePosition"",
                    ""type"": ""Value"",
                    ""id"": ""038a844b-e88d-41f8-8ae5-beca164fd0e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aeca1e98-fb6f-4883-a105-664fe6a745c8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MosueClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3bac537-eb3f-4370-92fa-e19963774ecf"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MosuePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mosue
        m_Mosue = asset.FindActionMap("Mosue", throwIfNotFound: true);
        m_Mosue_MosueClick = m_Mosue.FindAction("MosueClick", throwIfNotFound: true);
        m_Mosue_MosuePosition = m_Mosue.FindAction("MosuePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mosue
    private readonly InputActionMap m_Mosue;
    private IMosueActions m_MosueActionsCallbackInterface;
    private readonly InputAction m_Mosue_MosueClick;
    private readonly InputAction m_Mosue_MosuePosition;
    public struct MosueActions
    {
        private @MouseInput m_Wrapper;
        public MosueActions(@MouseInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MosueClick => m_Wrapper.m_Mosue_MosueClick;
        public InputAction @MosuePosition => m_Wrapper.m_Mosue_MosuePosition;
        public InputActionMap Get() { return m_Wrapper.m_Mosue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MosueActions set) { return set.Get(); }
        public void SetCallbacks(IMosueActions instance)
        {
            if (m_Wrapper.m_MosueActionsCallbackInterface != null)
            {
                @MosueClick.started -= m_Wrapper.m_MosueActionsCallbackInterface.OnMosueClick;
                @MosueClick.performed -= m_Wrapper.m_MosueActionsCallbackInterface.OnMosueClick;
                @MosueClick.canceled -= m_Wrapper.m_MosueActionsCallbackInterface.OnMosueClick;
                @MosuePosition.started -= m_Wrapper.m_MosueActionsCallbackInterface.OnMosuePosition;
                @MosuePosition.performed -= m_Wrapper.m_MosueActionsCallbackInterface.OnMosuePosition;
                @MosuePosition.canceled -= m_Wrapper.m_MosueActionsCallbackInterface.OnMosuePosition;
            }
            m_Wrapper.m_MosueActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MosueClick.started += instance.OnMosueClick;
                @MosueClick.performed += instance.OnMosueClick;
                @MosueClick.canceled += instance.OnMosueClick;
                @MosuePosition.started += instance.OnMosuePosition;
                @MosuePosition.performed += instance.OnMosuePosition;
                @MosuePosition.canceled += instance.OnMosuePosition;
            }
        }
    }
    public MosueActions @Mosue => new MosueActions(this);
    public interface IMosueActions
    {
        void OnMosueClick(InputAction.CallbackContext context);
        void OnMosuePosition(InputAction.CallbackContext context);
    }
}
